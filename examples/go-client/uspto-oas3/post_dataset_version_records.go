// Code generated by github.com/swaggest/swac v0.0.3, DO NOT EDIT.

package uspto

import (
	"context"
	"encoding/json"
	"errors"
	"net/http"
	"net/url"
)

// PostDatasetVersionRecordsRequest is operation request value.
type PostDatasetVersionRecordsRequest struct {
	// Version is a required `version` parameter in path.
	// Version of the dataset.
	Version string
	// Dataset is a required `dataset` parameter in path.
	// Name of the dataset. In this case, the default value is oa_citations
	Dataset string
}

// encode creates *http.Request for request data.
func (request *PostDatasetVersionRecordsRequest) encode(ctx context.Context, baseURL string) (*http.Request, error) {
	requestUri := baseURL + "/" + url.PathEscape(request.Dataset) + "/" + url.PathEscape(request.Version) + "/records"
	req, err := http.NewRequest(http.MethodPost, requestUri, nil)
	if err != nil {
	    return nil, err
	}
	req = req.WithContext(ctx)
	return req, err
}

// PostDatasetVersionRecordsResponse is operation response value.
type PostDatasetVersionRecordsResponse struct {
	StatusCode int
	OK         []map[string]map[string]interface{}  // OK is a value of 200 OK response.
	NotFound   interface{}                          // NotFound is a value of 404 Not Found response.
}

// decode loads data from *http.Response.
func (result *PostDatasetVersionRecordsResponse) decode(resp *http.Response) error {
	result.StatusCode = resp.StatusCode
	switch resp.StatusCode {
	case http.StatusOK:
	    err := json.NewDecoder(resp.Body).Decode(&result.OK)
	    if err != nil {
	        return err
	    }
	case http.StatusNotFound:
	    err := json.NewDecoder(resp.Body).Decode(&result.NotFound)
	    if err != nil {
	        return err
	    }
	default:
	    return errors.New("unexpected response status: " + resp.Status)
	}
	return nil

}

// PostDatasetVersionRecords performs REST operation.
func (c *Client) PostDatasetVersionRecords(ctx context.Context, request PostDatasetVersionRecordsRequest) (PostDatasetVersionRecordsResponse, error) {
	result := PostDatasetVersionRecordsResponse{}
	ctx = context.WithValue(ctx, "restOperationPath", "/{dataset}/{version}/records")
	if c.Timeout != 0 {
		var cancel func()
		ctx, cancel = context.WithTimeout(ctx, c.Timeout)
		defer cancel()
	}
	req, err := request.encode(ctx, c.BaseURL)
	if err != nil {
	    return result, err
	}
	resp, err := c.transport.RoundTrip(req)

	if err != nil {
	    return result, err
	}
	defer resp.Body.Close()
	err = result.decode(resp)
	if err != nil {
	    return result, err
	}
	return result, nil
}
